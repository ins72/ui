// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// MongoDB configuration for production
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// For SQLite development fallback, uncomment and configure:
// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  image     String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products      Product[]
  customers     Customer[]
  transactions  Transaction[]
  comments      Comment[]
  messages      Message[]
  notifications Notification[]
  income        Income[]
  countries     Country[]
  chartData     ChartData[]
  activeTimes   ActiveTime[]
  promotes      Promote[]
  payouts       Payout[]
  refunds       Refund[]
  statements    Statement[]
  affiliateData AffiliateData?

  @@map("users")
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Float
  image         String
  category      String
  status        String   @default("draft") // draft, scheduled, released, archived
  userId        String   @db.ObjectId
  sales         Int      @default(0)
  views         Int      @default(0)
  likes         Int      @default(0)
  commentsCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  comments      Comment[]
  refunds       Refund[]
  notifications Notification[]

  @@map("products")
}

model Customer {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  avatar       String?
  userId       String    @db.ObjectId
  totalSpent   Float     @default(0)
  purchases    Int       @default(0)
  lastPurchase DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  comments      Comment[]
  messages      Message[]
  refunds       Refund[]
  notifications Notification[]

  @@map("customers")
}

model Transaction {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  amount     Float
  type       String // sale, refund, payout
  status     String   @default("pending") // pending, completed, failed
  userId     String   @db.ObjectId
  productId  String?  @db.ObjectId
  customerId String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  userId     String   @db.ObjectId
  productId  String   @db.ObjectId
  customerId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  userId     String   @db.ObjectId
  customerId String   @db.ObjectId
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String // purchase, comment, like, refund, payout
  message    String
  userId     String   @db.ObjectId
  productId  String?  @db.ObjectId
  customerId String?  @db.ObjectId
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product?  @relation(fields: [productId], references: [id], onDelete: SetNull)
  customer Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

model Income {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  type      String // revenue, commission, bonus
  source    String
  date      DateTime
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("income")
}

model Country {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  flag       String
  percentage Float
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("countries")
}

model ShopItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  price       Float
  image       String
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("shop_items")
}

model ChartData {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     Float
  type      String // balance, productView, sales, traffic
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chart_data")
}

model ActiveTime {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hour      Int
  activity  Int
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("active_times")
}

model Promote {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  value          String
  icon           String
  percentage     Float
  tooltip        String
  newCustomers   Int
  productReached Int
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("promotes")
}

model Payout {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  status      String    @default("pending") // pending, completed, failed
  method      String // bank, paypal, stripe
  userId      String    @db.ObjectId
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model Refund {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  reason      String
  status      String    @default("pending") // pending, completed, rejected
  userId      String    @db.ObjectId
  productId   String    @db.ObjectId
  customerId  String    @db.ObjectId
  processedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Statement {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  period         String // weekly, monthly, yearly
  startDate      DateTime
  endDate        DateTime
  totalEarnings  Float
  totalSales     Int
  totalCustomers Int
  totalProducts  Int
  userId         String   @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("statements")
}

model Creator {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  login     String
  details   String
  avatar    String
  isOnline  Boolean  @default(false)
  label     String
  tags      String
  time      String
  rating    Float
  items     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("creators")
}

model PricingPlan {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  percentage    Float?
  description   String
  features      String
  isActive      Boolean  @default(true)
  isRecommended Boolean  @default(false)
  sortOrder     Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("pricing_plans")
}

model FAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  category  String
  title     String
  content   String
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model AffiliateData {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  affiliateCode   String   @unique
  commissionRate  Float
  totalEarnings   Float    @default(0)
  totalReferrals  Int      @default(0)
  activeReferrals Int      @default(0)
  userId          String   @unique @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("affiliate_data")
}

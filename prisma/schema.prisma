// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("user")
  organizationId String?
  businessType  String?
  experienceLevel String?
  onboardingCompleted Boolean @default(false)
  onboardingStep String? @default("not_started")
  lastOnboardingUpdate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  organization  Organization? @relation(fields: [organizationId], references: [id])
  blogPosts     BlogPost[]
  comments      Comment[]
  onboardingAssessments OnboardingAssessment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id                String   @id @default(cuid())
  name              String
  description       String?
  owner             String
  businessType      String?
  experienceLevel   String?
  goals             String[] // JSON array of goal IDs
  painPoints        String[] // JSON array of pain point IDs
  goalsDetails      Json?    // JSON object with detailed goal information
  onboardingCompleted Boolean @default(false)
  onboardingData    Json?    // JSON object with complete onboarding data
  settings          Json?    // JSON object with organization settings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  users             User[]
  blogPosts         BlogPost[]
  onboardingAssessments OnboardingAssessment[]
}

model BlogPost {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  excerpt         String
  content         String   @db.Text
  authorId        String
  organizationId  String?
  category        String
  tags            String[] // JSON array of tags
  featuredImage   Json?    // JSON object with image data
  status          String   @default("draft") // draft, published, archived
  publishedAt     DateTime?
  metaTitle       String?
  metaDescription String?
  featured        Boolean  @default(false)
  allowComments   Boolean  @default(true)
  readTime        Int      @default(5)
  viewCount       Int      @default(0)
  seoTitle        String?
  seoDescription  String?
  targetAudience  String?
  readingLevel    String   @default("intermediate")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  author          User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  organization    Organization? @relation(fields: [organizationId], references: [id])
  comments        Comment[]

  @@index([category])
  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([organizationId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  parentId  String?  // For nested comments
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
  @@index([approved])
}

model OnboardingAssessment {
  id                String   @id @default(cuid())
  userId            String
  organizationId    String
  businessType      Json     // JSON object with business type data
  experienceLevel   Json     // JSON object with experience level data
  goals             Json     // JSON array of goal objects
  painPoints        Json     // JSON array of pain point objects
  goalsDetails      Json?    // JSON object with detailed goal information
  workspaceName     String
  workspaceDescription String?
  profileImage      String?
  recommendations   Json?    // JSON array of recommendation objects
  milestones        Json?    // JSON array of milestone objects
  dashboardConfig   Json?    // JSON object with dashboard configuration
  progress          Json?    // JSON object with progress tracking
  preferences       Json?    // JSON object with user preferences
  completedAt       DateTime @default(now())
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([completedAt])
}

model Workspace {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  members     Json?    // JSON array of member objects
  settings    Json?    // JSON object with workspace settings
  modules     Json?    // JSON array of enabled modules
  analytics   Json?    // JSON object with analytics data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId])
}
